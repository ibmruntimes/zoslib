///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// ZOSLIB
// (C) Copyright IBM Corp. 2025. All Rights Reserved.
// US Government Users Restricted Rights - Use, duplication
// or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////

#ifndef ZOS_CPP_V1_NEW
#define ZOS_CPP_V1_NEW

#include_next <new>

#if defined(__clang__) && !defined(__ibmxl__) && __cplusplus >= 201703L && \
    defined(ZOSLIB_ALIGNED_NEWDEL) && !_LIBCPP_HAS_ALIGNED_ALLOCATION && \
    defined(__cpp_aligned_new)

// __cpp_aligned_new is defined with -faligned-allocation.

#include "zos-macros.h"

namespace std {
  enum class align_val_t : std::size_t {};
}

void* operator new(size_t size, std::align_val_t al, const std::nothrow_t&) _NOEXCEPT __asm("__operator_new_not_noe");
void* operator new[](size_t size, std::align_val_t al, const std::nothrow_t&) _NOEXCEPT __asm("__operator_new_ar_not_noe");
void* operator new(std::size_t size, std::align_val_t al) _THROW_BAD_ALLOC __asm("__operator_new");
void* operator new[](std::size_t size, std::align_val_t al) _THROW_BAD_ALLOC __asm("__operator_new_ar");

void operator delete(void* ptr, std::align_val_t al) _NOEXCEPT __asm("__operator_delete_noe");
void operator delete(void* ptr, std::align_val_t al, const std::nothrow_t&) _NOEXCEPT __asm("__operator_delete_not_noe");
void operator delete(void* ptr, size_t, std::align_val_t al) _NOEXCEPT __asm("__operator_delete_sz_noe");
void operator delete[](void* ptr, std::align_val_t al) _NOEXCEPT __asm("__operator_delete_ar_noe");
void operator delete[](void* ptr, std::align_val_t al, const std::nothrow_t&) _NOEXCEPT __asm("__operator_delete_ar_not_noe");
void operator delete[](void* ptr, size_t, std::align_val_t al) _NOEXCEPT __asm("__operator_delete_sz_noe");

#endif
#endif
