.TH "src/zos.cc" 3 "zoslib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/zos.cc
.SH SYNOPSIS
.br
.PP
\fC#include 'edcwccwi\&.h'\fP
.br
\fC#include 'zos\-getentropy\&.h'\fP
.br
\fC#include 'zos\&.h'\fP
.br
\fC#include <_Ccsid\&.h>\fP
.br
\fC#include <_Nascii\&.h>\fP
.br
\fC#include <__le_api\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include <builtins\&.h>\fP
.br
\fC#include <ctest\&.h>\fP
.br
\fC#include <dlfcn\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <iconv\&.h>\fP
.br
\fC#include <libgen\&.h>\fP
.br
\fC#include <poll\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <signal\&.h>\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <sys/mman\&.h>\fP
.br
\fC#include <sys/msg\&.h>\fP
.br
\fC#include <sys/ps\&.h>\fP
.br
\fC#include <sys/shm\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <sys/time\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <sys/epoll\&.h>\fP
.br
\fC#include <sys/eventfd\&.h>\fP
.br
\fC#include <sys/inotify\&.h>\fP
.br
\fC#include <exception>\fP
.br
\fC#include <mutex>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <unordered_map>\fP
.br
\fC#include <vector>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBtimer_parm\fP"
.br
.ti -1c
.RI "struct \fBiarv64parm\fP"
.br
.ti -1c
.RI "struct \fB__hash_func\fP"
.br
.ti -1c
.RI "class \fB__Cache\fP"
.br
.ti -1c
.RI "struct \fBespiearg\fP"
.br
.ti -1c
.RI "struct \fBthunk24\fP"
.br
.ti -1c
.RI "struct \fBloadmod\fP"
.br
.ti -1c
.RI "struct \fBEDOI\fP"
.br
.ti -1c
.RI "struct \fBIFAEDSTA_parms\fP"
.br
.ti -1c
.RI "struct \fBIFAARGS\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB_AE_BIMODAL\fP   1"
.br
.ti -1c
.RI "#define \fB_ENHANCED_ASCII_EXT\fP   0xFFFFFFFF"
.br
.ti -1c
.RI "#define \fB_XOPEN_SOURCE\fP   600"
.br
.ti -1c
.RI "#define \fB_OPEN_SYS_FILE_EXT\fP   1"
.br
.ti -1c
.RI "#define \fB_OPEN_MSGQ_EXT\fP   1"
.br
.ti -1c
.RI "#define \fB__ZOS_CC\fP"
.br
.ti -1c
.RI "#define \fBdsa\fP()   ((unsigned long *)\fB_gdsa\fP())"
.br
.ti -1c
.RI "#define \fBMIN\fP(a,  b)   ((a) < (b) ? (a) : (b))"
.br
.ti -1c
.RI "#define \fBXSTR\fP(a)   \fBSTRINGIFY\fP(a)"
.br
.ti -1c
.RI "#define \fBSTRINGIFY\fP(a)   #a"
.br
.ti -1c
.RI "#define \fBDEFAULT_BUILD_STRING\fP     'v' \fBXSTR\fP(\fBMAJOR_VERSION\fP) '\&.' \fBXSTR\fP(\fBMINOR_VERSION\fP) '\&.' \fBXSTR\fP(\fBPATCH_VERSION\fP)"
.br
.ti -1c
.RI "#define \fBmax\fP(a,  b)   (((a) > (b)) ? (a) : (b))"
.br
.ti -1c
.RI "#define \fBPGTH_CURRENT\fP   1"
.br
.ti -1c
.RI "#define \fBPGTHACOMMANDLONG\fP   1"
.br
.ti -1c
.RI "#define \fB__AttrPacked\fP"
.br
.ti -1c
.RI "#define \fB__USE_IARV64\fP   1"
.br
.ti -1c
.RI "#define \fBCSG\fP(_op1,  _op2,  _op3)     __asm volatile(' csg %0,%2,%1 \\n ' : '+r'(_op1), '+m'(_op2) : 'r'(_op3) :)"
.br
.ti -1c
.RI "#define \fBCS\fP(_op1,  _op2,  _op3)     __asm volatile(' cs %0,%2,%1 \\n ' : '+r'(_op1), '+m'(_op2) : 'r'(_op3) :)"
.br
.ti -1c
.RI "#define \fBPPA_FUNC_LENGTH\fP   256"
.br
.ti -1c
.RI "#define \fBMAP_LE_FUNC\fP(func,  offset)   (func = (typeof(func))((unsigned long*)\fB__get_libvec_base\fP() + (offset<<1)))"
.br
.ti -1c
.RI "#define \fBCHECK_LE_FUNC\fP(offset)   (\fB__check_le_func\fP((void*)((unsigned long*)\fB__get_libvec_base\fP() + (offset<<1)), ppa_funcname, \fBPPA_FUNC_LENGTH\fP))"
.br
.ti -1c
.RI "#define \fBMAP_LE_FUNC_ELSE_ZOSLIB_FUNC\fP(func,  zoslibfunc,  funcstring,  offset)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBtimer_parm\fP \fBtimer_parm_t\fP"
.br
.ti -1c
.RI "typedef unsigned long \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef unsigned long \fBkey_type\fP"
.br
.ti -1c
.RI "typedef std::unordered_map< \fBkey_type\fP, \fBvalue_type\fP, \fB__hash_func\fP >::const_iterator \fBmem_cursor_t\fP"
.br
.ti -1c
.RI "typedef struct \fBthunk24\fP \fBthunk24_t\fP"
.br
.ti -1c
.RI "typedef struct \fBloadmod\fP \fBloadmod_t\fP"
.br
.ti -1c
.RI "typedef int \fBIfaedType\fP"
.br
.ti -1c
.RI "typedef char \fBIfaedProdOwner\fP[16]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdName\fP[16]"
.br
.ti -1c
.RI "typedef char \fBIfaedFeatureName\fP[16]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdVers\fP[2]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdRel\fP[2]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdMod\fP[2]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdID\fP[8]"
.br
.ti -1c
.RI "typedef char \fBIfaedProdToken\fP[8]"
.br
.ti -1c
.RI "typedef int \fBIfaedFeaturesLen\fP"
.br
.ti -1c
.RI "typedef int \fBIfaedReturnCode\fP"
.br
.ti -1c
.RI "typedef struct \fBIFAEDSTA_parms\fP \fBIFAEDSTA_parms_t\fP"
.br
.ti -1c
.RI "typedef struct \fBIFAARGS\fP \fBIFAARGS_t\fP"
.br
.ti -1c
.RI "typedef int(* \fBzoslib_env_hook_func\fP) (char *)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fB_gdsa\fP ()"
.br
.ti -1c
.RI "void \fB__set_ccsid_guess_buf_size\fP (int nbytes)"
.br
.ti -1c
.RI "__zinit * \fB__get_instance\fP ()"
.br
.ti -1c
.RI "char ** \fB__get_environ_np\fP (void)"
.br
.ti -1c
.RI "int \fB__setenv_a\fP (const char *, const char *, int) asm('@@A00188')"
.br
.ti -1c
.RI "void \fB__xfer_env\fP (void)"
.br
.ti -1c
.RI "int \fBgettid\fP ()"
.br
.ti -1c
.RI "int \fBbacktrace\fP (void **buffer, int size)"
.br
.ti -1c
.RI "char ** \fBbacktrace_symbols\fP (void *const *buffer, int size)"
.br
.ti -1c
.RI "void \fBbacktrace_symbols_fd\fP (void *const *buffer, int size, int fd)"
.br
.ti -1c
.RI "void \fB__display_backtrace\fP (int fd)"
.br
.ti -1c
.RI "void \fB__abend\fP (int comp_code, unsigned reason_code, int flat_byte, void *plist)"
.br
.ti -1c
.RI "int \fBstrcasecmp_ignorecp\fP (const char *a, const char *b)"
.br
.ti -1c
.RI "int \fBstrncasecmp_ignorecp\fP (const char *a, const char *b, size_t n)"
.br
.ti -1c
.RI "int \fBget_ipcs_overview\fP (IPCQPROC *info)"
.br
.ti -1c
.RI "void \fB__cleanupipc\fP (int others)"
.br
.ti -1c
.RI "unsigned long \fB__clock\fP (void)"
.br
.ti -1c
.RI "void \fB__settimelimit\fP (int secs)"
.br
.ti -1c
.RI "void * \fB__dlcb_next\fP (void *last)"
.br
.ti -1c
.RI "int \fB__dlcb_entry_name\fP (char *buf, int size, void *dlcb)"
.br
.ti -1c
.RI "void * \fB__dlcb_entry_addr\fP (void *dlcb)"
.br
.ti -1c
.RI "int \fB__dlcb_iterate\fP (int(*cb)(char *, void *, void *), void *data)"
.br
.ti -1c
.RI "void \fBabort\fP (void)"
.br
.ti -1c
.RI "void \fB__set_backtrace_on_abort\fP (bool flag)"
.br
.ti -1c
.RI "int \fB__cond_timed_wait\fP (unsigned int secs, unsigned int nsecs, unsigned int event_list, unsigned int *secs_rem, unsigned int *nsecs_rem)"
.br
.ti -1c
.RI "int \fBkill\fP (int pid, int sig)"
.br
.ti -1c
.RI "int \fB__getargcv\fP (int *argc, char ***argv, pid_t pid)"
.br
.ti -1c
.RI "char ** \fB__getargv\fP (void)"
.br
.ti -1c
.RI "char ** \fB__getargv_a\fP (void)"
.br
.ti -1c
.RI "int \fB__getargc\fP (void)"
.br
.ti -1c
.RI "int \fB__getexepath\fP (char *path, int pathlen, pid_t pid)"
.br
.ti -1c
.RI "\fBnotagread_t\fP \fB__get_no_tag_read_behaviour\fP ()"
.br
.ti -1c
.RI "int \fB__get_no_tag_ignore_ccsid1047\fP ()"
.br
.ti -1c
.RI "unsigned long \fB__mach_absolute_time\fP (void)"
.br
.ti -1c
.RI "unsigned long \fBgetipttoken\fP (void)"
.br
.ti -1c
.RI "void * \fB__zalloc\fP (size_t len, size_t alignment)"
.br
.ti -1c
.RI "void * \fBanon_mmap\fP (void *_, size_t len)"
.br
.ti -1c
.RI "int \fB__zfree\fP (void *addr, int len)"
.br
.ti -1c
.RI "int \fBanon_munmap\fP (void *addr, size_t len)"
.br
.ti -1c
.RI "int \fBexecvpe\fP (const char *name, char *const argv[], char *const envp[])"
.br
.ti -1c
.RI "void \fB__atomic_store_real\fP (int size, void *ptr, void *val, int memorder) asm('__atomic_store')"
.br
.ti -1c
.RI "int \fB__testread\fP (const void *location)"
.br
.ti -1c
.RI "void \fB__tb\fP (void)"
.br
.ti -1c
.RI "int \fBclock_gettime\fP (\fBclockid_t\fP clk_id, struct timespec *tp)"
.br
.ti -1c
.RI "char * \fB__get_le_version\fP (void)"
.br
.ti -1c
.RI "void \fB__build_version\fP (void)"
.br
.ti -1c
.RI "void \fB__cpu_relax\fP (\fB__crwa_t\fP *p)"
.br
.ti -1c
.RI "void \fB__tcp_clear_to_close\fP (int socket, unsigned int secs)"
.br
.ti -1c
.RI "void \fB__unloadmod\fP (void *mod)"
.br
.ti -1c
.RI "const char * \fBgetIFAUsageErrorString\fP (unsigned long rc)"
.br
.ti -1c
.RI "unsigned long long \fB__registerProduct\fP (const char *major_version, const char *product_owner, const char *feature_name, const char *product_name, const char *pid)"
.br
.ti -1c
.RI "void * \fB__zalloc_for_fd\fP (size_t len, const char *filename, int fd, off_t offset)"
.br
.ti -1c
.RI "void * \fBroanon_mmap\fP (void *_, size_t len, int prot, int flags, const char *filename, int fd, off_t offset)"
.br
.ti -1c
.RI "int \fB__print_zoslib_help\fP (\fBFILE\fP *fp, const char *title)"
.br
.ti -1c
.RI "int \fB__update_envar_settings\fP (const char *envar)"
.br
.ti -1c
.RI "int \fB__update_envar_names\fP (\fBzoslib_config_t\fP *const config)"
.br
.ti -1c
.RI "void * \fB__iterate_stack_and_get\fP (void *dsaptr, \fB__stack_info\fP *si)"
.br
.ti -1c
.RI "int * \fB__get_stack_start\fP ()"
.br
.ti -1c
.RI "unsigned long \fB__get_libvec_base\fP ()"
.br
.ti -1c
.RI "int \fBfutimes\fP (int fd, const struct timeval tv[2])"
.br
.RI "(__EDC_TARGET < 0x42050000) && defined(ZOSLIB_ENABLE_V2R5_FEATURES) "
.ti -1c
.RI "int \fBlutimes\fP (const char *filename, const struct timeval tv[2])"
.br
.ti -1c
.RI "int \fB__nanosleep\fP (const struct timespec *req, struct timespec *rem)"
.br
.ti -1c
.RI "void \fBinit_zoslib_config\fP (\fBzoslib_config_t\fP &config)"
.br
.ti -1c
.RI "void \fBinit_zoslib_config\fP (\fBzoslib_config_t\fP *const config)"
.br
.ti -1c
.RI "void \fBinit_zoslib\fP (const \fBzoslib_config_t\fP config)"
.br
.ti -1c
.RI "int \fB__check_le_func\fP (void *addr, char *funcname, size_t len)"
.br
.ti -1c
.RI "bool \fB__doLogMemoryUsage\fP ()"
.br
.ti -1c
.RI "void \fB__setLogMemoryUsage\fP (bool v)"
.br
.ti -1c
.RI "char * \fB__getMemoryUsageLogFile\fP ()"
.br
.ti -1c
.RI "bool \fB__doLogMemoryAll\fP ()"
.br
.ti -1c
.RI "bool \fB__doLogMemoryWarning\fP ()"
.br
.ti -1c
.RI "void \fB__mainTerminating\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const char * \fB__zoslib_version\fP = \fBDEFAULT_BUILD_STRING\fP"
.br
.ti -1c
.RI "char ** \fBenviron\fP"
.br
.ti -1c
.RI "const char * \fBMODULE_REGISTER_USAGE\fP = 'IFAUSAGE'"
.br
.ti -1c
.RI "const char * \fBIFAUsageErrorStrings\fP []"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __AttrPacked"

.SS "#define __USE_IARV64   1"

.SS "#define __ZOS_CC"

.SS "#define _AE_BIMODAL   1"

.SS "#define _ENHANCED_ASCII_EXT   0xFFFFFFFF"

.SS "#define _OPEN_MSGQ_EXT   1"

.SS "#define _OPEN_SYS_FILE_EXT   1"

.SS "#define _XOPEN_SOURCE   600"

.SS "#define CHECK_LE_FUNC(offset)   (\fB__check_le_func\fP((void*)((unsigned long*)\fB__get_libvec_base\fP() + (offset<<1)), ppa_funcname, \fBPPA_FUNC_LENGTH\fP))"

.SS "#define CS(_op1, _op2, _op3)     __asm volatile(' cs %0,%2,%1 \\n ' : '+r'(_op1), '+m'(_op2) : 'r'(_op3) :)"

.SS "#define CSG(_op1, _op2, _op3)     __asm volatile(' csg %0,%2,%1 \\n ' : '+r'(_op1), '+m'(_op2) : 'r'(_op3) :)"

.SS "#define DEFAULT_BUILD_STRING     'v' \fBXSTR\fP(\fBMAJOR_VERSION\fP) '\&.' \fBXSTR\fP(\fBMINOR_VERSION\fP) '\&.' \fBXSTR\fP(\fBPATCH_VERSION\fP)"

.SS "#define dsa()   ((unsigned long *)\fB_gdsa\fP())"

.SS "#define MAP_LE_FUNC(func, offset)   (func = (typeof(func))((unsigned long*)\fB__get_libvec_base\fP() + (offset<<1)))"

.SS "#define MAP_LE_FUNC_ELSE_ZOSLIB_FUNC(func, zoslibfunc, funcstring, offset)"
\fBValue:\fP.PP
.nf
  if (CHECK_LE_FUNC(offset) && strcmp(ppa_funcname, funcstring) == 0) { \\
    MAP_LE_FUNC(func, offset); \\
  } else if (zoslibfunc) { \\
    func = zoslibfunc; \\
  }
.fi

.SS "#define max(a, b)   (((a) > (b)) ? (a) : (b))"

.SS "#define MIN(a, b)   ((a) < (b) ? (a) : (b))"

.SS "#define PGTH_CURRENT   1"

.SS "#define PGTHACOMMANDLONG   1"

.SS "#define PPA_FUNC_LENGTH   256"

.SS "#define STRINGIFY(a)   #a"

.SS "#define XSTR(a)   \fBSTRINGIFY\fP(a)"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBIFAARGS\fP \fBIFAARGS_t\fP"

.SS "typedef char IfaedFeatureName[16]"

.SS "typedef int \fBIfaedFeaturesLen\fP"

.SS "typedef char IfaedProdID[8]"

.SS "typedef char IfaedProdMod[2]"

.SS "typedef char IfaedProdName[16]"

.SS "typedef char IfaedProdOwner[16]"

.SS "typedef char IfaedProdRel[2]"

.SS "typedef char IfaedProdToken[8]"

.SS "typedef char IfaedProdVers[2]"

.SS "typedef int \fBIfaedReturnCode\fP"

.SS "typedef struct \fBIFAEDSTA_parms\fP \fBIFAEDSTA_parms_t\fP"

.SS "typedef int \fBIfaedType\fP"

.SS "typedef unsigned long \fBkey_type\fP"

.SS "typedef struct \fBloadmod\fP \fBloadmod_t\fP"

.SS "typedef std::unordered_map<\fBkey_type\fP,\fBvalue_type\fP,\fB__hash_func\fP>::const_iterator \fBmem_cursor_t\fP"

.SS "typedef struct \fBthunk24\fP \fBthunk24_t\fP"

.SS "typedef struct \fBtimer_parm\fP \fBtimer_parm_t\fP"

.SS "typedef unsigned long \fBvalue_type\fP"

.SS "typedef int(* zoslib_env_hook_func) (char *)"

.SH "Function Documentation"
.PP 
.SS "void __abend (int comp_code, unsigned reason_code, int flat_byte, void * plist)"
Generates an SVC 13 abend\&. 
.PP
\fBParameters\fP
.RS 4
\fIcomp_code\fP Completion code\&. 
.br
\fIreason_code\fP Reason code\&. 
.br
\fIflat_byte\fP Flat Byte\&. 
.br
\fIplist\fP Parameter list\&. 
.RE
.PP

.SS "void __atomic_store_real (int size, void * ptr, void * val, int memorder)"

.SS "void __build_version (void)"
Prints the build version of the library 
.SS "int __check_le_func (void * addr, char * funcname, size_t len)"
Check if an LE function is present in the LE vector table 
.PP
\fBParameters\fP
.RS 4
\fIaddr\fP address to LE function 
.br
\fIfuncname\fP pointer to string that will hold the function name 
.br
\fImax\fP length of string corresponding to funcname 
.RE
.PP
\fBReturns\fP
.RS 4
returns 1 if successful, 0 if unsuccessful\&. 
.RE
.PP

.SS "void __cleanupipc (int others)"
Remove IPC semaphores and shared memory\&. 
.PP
\fBParameters\fP
.RS 4
\fIothers\fP non-zero value indicates remove IPC not associated with current process\&. 
.RE
.PP

.SS "unsigned long __clock (void)"

.SS "int __cond_timed_wait (unsigned int secs, unsigned int nsecs, unsigned int event_list, unsigned int * secs_rem, unsigned int * nsecs_rem)"
Suspend the calling thread until any one of a set of events has occurred or until a specified amount of time has passed\&. 
.PP
\fBParameters\fP
.RS 4
\fIsecs\fP seconds to suspend 
.br
\fInsecs\fP nanoseconds to suspend 
.br
\fIevent_list\fP events that will trigger thread to resume (CW_INTRPT or CW_CONDVAR) 
.br
\fIsecs_rem\fP seconds remaining 
.br
\fInsecs_rem\fP nanoseconds remaining 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, -1 if unsuccessful\&. 
.RE
.PP

.SS "void __cpu_relax (\fB__crwa_t\fP * p)"
TODO(itodorov) - zos: document these interfaces 
.SS "void __display_backtrace (int fd)"
Print backtrace of stack to file descriptor\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP

.SS "void * __dlcb_entry_addr (void * dlcb)"
Get address of dlcb entry 
.PP
\fBParameters\fP
.RS 4
\fIdlcb\fP - current dlcb 
.RE
.PP
\fBReturns\fP
.RS 4
returns entry address of dlcb 
.RE
.PP

.SS "int __dlcb_entry_name (char * buf, int size, void * dlcb)"
Get entry name of given dlcb 
.PP
\fBParameters\fP
.RS 4
\fIbuf\fP - DLL name of given dlcb 
.br
\fIsize\fP - maximum number of bytes 
.br
\fIdlcb\fP - current dlcb 
.RE
.PP
\fBReturns\fP
.RS 4
[in] number of bytes written to buf 
.RE
.PP

.SS "int __dlcb_iterate (int(*)(char *, void *, void *) cb, void * data)"

.SS "void * __dlcb_next (void * last)"
Get next dlcb entry 
.PP
\fBParameters\fP
.RS 4
\fIlast\fP - previous dlcb entry 
.RE
.PP
\fBReturns\fP
.RS 4
[in] returns next dlcb entry 
.RE
.PP

.SS "bool __doLogMemoryAll ()"
Returns true if all messages from memory allocation and release are being displayed\&. 
.SS "bool __doLogMemoryUsage ()"
Returns true if logging of memory allocation and release is specified\&. 
.SS "bool __doLogMemoryWarning ()"
Returns true if only warnings from memory allocation and release are being displayed\&. Errors are always included if memory logging in on\&. 
.SS "char ** __get_environ_np (void)"
Get the environ\&. 
.PP
\fBReturns\fP
.RS 4
returns pointer to environment list 
.RE
.PP

.SS "__zinit * __get_instance ()"

.SS "char * __get_le_version (void)"
Return the LE version as a string in the format of 'Product %d%s Version %d Release %d Modification %d' 
.SS "unsigned long __get_libvec_base (void)"
Gets the LE libvec base address 
.PP
\fBReturns\fP
.RS 4
libvec base address 
.RE
.PP

.SS "int __get_no_tag_ignore_ccsid1047 ()"

.SS "\fBnotagread_t\fP __get_no_tag_read_behaviour ()"

.SS "int * __get_stack_start ()"
Get the stack start address for the current thread 
.PP
\fBReturns\fP
.RS 4
returns the stack start address 
.RE
.PP

.SS "int __getargc (void)"
Get program argument count of the current process 
.PP
\fBReturns\fP
.RS 4
returns count of process arguments 
.RE
.PP

.SS "int __getargcv (int * argc, char *** argv, pid_t pid)"
Get program argument list of a given process id 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP - pointer to store count of the arguments 
.br
\fIargv\fP - pointer to store an array of pointers that point to each argument 
.br
\fIpid\fP - process id to obtain the argc and argv for 
.RE
.PP
\fBNote\fP
.RS 4
Call free(argv) when done accessing argv\&. 
.RE
.PP
\fBReturns\fP
.RS 4
On success, returns 0, or -1 on error\&. 
.RE
.PP

.SS "char ** __getargv (void)"
Get program argument list of the current process 
.PP
\fBReturns\fP
.RS 4
returns an array of process arguments 
.RE
.PP

.SS "char ** __getargv_a (void)"

.SS "int __getexepath (char * path, int pathlen, pid_t pid)"
Get the executable path of a given process id 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP - pointer to the destination array to copy the null-terminated path to 
.br
\fIpathlen\fP - length of the given array 
.br
\fIpid\fP - process id to obtain the executable path for 
.RE
.PP
\fBReturns\fP
.RS 4
On success, returns 0, or -1 on error\&. 
.RE
.PP

.SS "char * __getMemoryUsageLogFile ()"
Returns the file name, including 'stdout' or 'stderr', used to log memory allocation and release to\&. 
.SS "void * __iterate_stack_and_get (void * dsaptr, \fB__stack_info\fP * si)"
Iterate to next stack dsa based on current dsa 
.PP
\fBParameters\fP
.RS 4
\fIdsaptr\fP - current dsa entry 
.br
\fIsi\fP - stack information of next dsa 
.RE
.PP
\fBReturns\fP
.RS 4
returns the next dsa entry in the chain or 0 if not found 
.RE
.PP

.SS "unsigned long __mach_absolute_time (void)"
Obtain the mach absolute time 
.PP
\fBReturns\fP
.RS 4
returns mach absolute time 
.RE
.PP

.SS "void __mainTerminating ()"
Tell zoslib that the main process is terminating, for its diagnostics\&. 
.SS "int __nanosleep (const struct timespec * req, struct timespec * rem)"
Suspends the execution of the calling thread until either at least the time specified in *req has elapsed, an event occurs, or a signal arrives\&. 
.PP
\fBParameters\fP
.RS 4
\fIreq\fP struct used to specify intervals of time with nanosecond precision 
.br
\fIrem\fP the remaining time if the call is interrupted 
.RE
.PP

.SS "int __print_zoslib_help (\fBFILE\fP * fp, const char * title)"
Prints zoslib help information to specified FILE pointer 
.PP
\fBParameters\fP
.RS 4
\fIFILE\fP pointer to write to 
.br
\fItitle\fP header, specify NULL for default 
.RE
.PP
\fBReturns\fP
.RS 4
On success, returns 0, or < 0 on error\&. 
.RE
.PP

.SS "unsigned long long __registerProduct (const char * major_version, const char * product_owner, const char * feature_name, const char * product_name, const char * pid)"
Registers product for SMF 89 Type 1 records using IFAUSAGE macro\&. 
.PP
\fBParameters\fP
.RS 4
\fImajor_version\fP The major version of Product (e\&.g\&. 14) 
.br
\fIproduct_owner\fP The product owner (e\&.g\&. IBM) 
.br
\fIfeature_name\fP The feature name (e\&.g\&. Node\&.js) 
.br
\fIproduct_name\fP The product name (e\&.g\&. Node\&.js for z/OS) 
.br
\fIpid\fP The Product ID (e\&.g\&. 5676-SDK) 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, non-zero if unsuccessful\&. 
.RE
.PP

.SS "void __set_backtrace_on_abort (bool flag)"
Enable or disable \fBabort()\fP from calling display_backtrace()\&. Default is true\&. 
.SS "void __set_ccsid_guess_buf_size (int nbytes)"

.SS "int __setenv_a (const char *, const char *, int)"

.SS "void __setLogMemoryUsage (bool v)"

.SS "void __settimelimit (int secs)\fC [extern]\fP"

.SS "void __tb (void)"

.SS "void __tcp_clear_to_close (int socket, unsigned int secs)"
Attempts to a close a socket for a period of time 
.PP
\fBParameters\fP
.RS 4
\fIsocket\fP socket handle 
.br
\fIsecs\fP number of seconds to attempt the close 
.RE
.PP

.SS "int __testread (const void * location)"
TODO(itodorov) - zos: document these interfaces 
.SS "void __unloadmod (void * mod)\fC [extern]\fP"

.SS "int __update_envar_names (\fBzoslib_config_t\fP *const config)"
Changes the names of one or more of the environment variables zoslib uses 
.PP
\fBParameters\fP
.RS 4
\fIzoslib_confit_t\fP structure that defines the new environment variable name(s) 
.RE
.PP
\fBReturns\fP
.RS 4
0 for success, or -1 for failure 
.RE
.PP

.SS "int __update_envar_settings (const char * envar)"
Updates the zoslib global variables associated with the zoslib environment variables
.PP
\fBParameters\fP
.RS 4
\fIenvar\fP environment variable to update, specify NULL to update all 
.RE
.PP
\fBReturns\fP
.RS 4
0 for success, or -1 for failure 
.RE
.PP

.SS "void __xfer_env (void)"
Convert environment variables from EBCDIC to ASCII\&. 
.SS "void * __zalloc (size_t len, size_t alignment)"
Allocate memory in 64-bit virtual storage when size is a megabyte multiple or above 2GB, or in 31-bit storage otherwise, and if none is available, attempt to allocate from 64-bit virtual storage\&. 
.PP
\fBParameters\fP
.RS 4
\fIlen\fP length in bytes of memory to allocate 
.br
\fIalignment\fP in bytes and applies only to 31-bit storage (64-bit storage is always megabyte-aligned) 
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the beginning of newly allocated memory, or 0 if unsuccessful 
.RE
.PP

.SS "void * __zalloc_for_fd (size_t len, const char * filename, int fd, off_t offset)"
Allocate memory (using \fB__zalloc()\fP) and read into it contents of given file 
.PP
\fBParameters\fP
.RS 4
\fIlen\fP length in bytes of memory to allocate 
.br
\fIfilename\fP filename to read 
.br
\fIfd\fP file descriptor 
.br
\fIoffset\fP offset in bytes into the file to read 
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the beginning of newly allocated memory, or 0 if unsuccessful 
.RE
.PP

.SS "int __zfree (void * addr, int len)"
Deallocate memory 
.PP
\fBParameters\fP
.RS 4
\fIaddr\fP start address of memory 
.br
\fIlen\fP length in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, -1 if unsuccessful 
.RE
.PP

.SS "void * _gdsa ()"

.SS "void abort (void)"

.SS "void * anon_mmap (void * _, size_t len)"
Allocate memory in 64-bit virtual storage when size is a megabyte multiple or above 2GB, or in 31-bit storage (with PAGE_SIZE bytes alignment) otherwise, and if none is available, attempt to allocate from 64-bit virtual storage\&. 
.PP
\fBParameters\fP
.RS 4
\fI_\fP ignored 
.br
\fIlen\fP length in bytes of memory to allocate 
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the beginning of newly allocated memory, or MAP_FAILED if unsuccessful 
.RE
.PP
\fBDeprecated\fP
.RS 4
This function will be removed once mmap is fully functional (e\&.g\&. MAP_ANONYMOUS is supported) 
.RE
.PP

.SS "int anon_munmap (void * addr, size_t len)"
Deallocate memory 
.PP
\fBParameters\fP
.RS 4
\fIaddr\fP start address of memory 
.br
\fIlen\fP length in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, -1 if unsuccessful 
.RE
.PP
\fBDeprecated\fP
.RS 4
This function will be removed once mmap is fully functional (e\&.g\&. MAP_ANONYMOUS is supported) 
.RE
.PP

.SS "int backtrace (void ** buffer, int size)"
Generate a backtrace and store into *Buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP Address of location to store backtrace to\&. 
.br
\fIsize\fP Maximum number of bytes to store\&. 
.RE
.PP
\fBReturns\fP
.RS 4
if successful, returns 0, otherwise -1 
.RE
.PP

.SS "char ** backtrace_symbols (void *const * buffer, int size)"
Generate a backtrace symbols and store into *Buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP Address of location to store backtrace to\&. 
.br
\fIsize\fP Maximum number of bytes to store\&. 
.RE
.PP
\fBReturns\fP
.RS 4
if successful, an array of strings, otherwise returns NULL\&. 
.RE
.PP

.SS "void backtrace_symbols_fd (void *const * buffer, int size, int fd)"
Generate a backtrace symbols and store into *Buffer\&. 
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP Address of location to store backtrace to\&. 
.br
\fIsize\fP Maximum number of bytes to store\&. 
.br
\fIfd\fP file descriptor\&. 
.RE
.PP

.SS "int clock_gettime (\fBclockid_t\fP clk_id, struct timespec * tp)"

.SS "int execvpe (const char * name, char *const argv[], char *const envp[])"
Execute a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIname\fP used to construct a pathname that identifies the new process image file\&. 
.br
\fIargv\fP an array of character pointers to NULL-terminated strings\&. 
.br
\fIenvp\fP an array of character pointers to NULL-terminated strings\&. 
.RE
.PP
\fBReturns\fP
.RS 4
if successful, it doesn't return; otherwise, it returns -1 and sets errno\&. 
.RE
.PP

.SS "int futimes (int fd, const struct timeval tv[2])"

.PP
(__EDC_TARGET < 0x42050000) && defined(ZOSLIB_ENABLE_V2R5_FEATURES) Changes the access and modification times of a file 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor to modify 
.br
\fItv\fP timeval structure containing new time 
.RE
.PP
\fBReturns\fP
.RS 4
return 0 for success, or -1 for failure\&. 
.RE
.PP

.SS "int get_ipcs_overview (IPCQPROC * info)"
Returns the overview structure of IPCQPROC 
.PP
\fBParameters\fP
.RS 4
\fIinfo\fP address of allocated IPCQPROC structure 
.RE
.PP
\fBReturns\fP
.RS 4
On success, returns 0, or -1 on error\&. 
.RE
.PP

.SS "const char * getIFAUsageErrorString (unsigned long rc)"
Retrieves error message from __registerProduct IFAUSAGE macro\&. 
.PP
\fBParameters\fP
.RS 4
\fIrc\fP return code from __registerProduct\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns error message as C character string\&. 
.RE
.PP

.SS "unsigned long getipttoken (void)"

.SS "int gettid ()"
Get the Thread ID\&. 
.PP
\fBReturns\fP
.RS 4
returns the current thread id 
.RE
.PP

.SS "void init_zoslib (const \fBzoslib_config_t\fP config)"
Initialize zoslib library 
.PP
\fBParameters\fP
.RS 4
\fIconfig\fP struct to configure zoslib\&. 
.RE
.PP

.SS "void init_zoslib_config (\fBzoslib_config_t\fP & config)"

.SS "void init_zoslib_config (\fBzoslib_config_t\fP *const config)"
Initialize the struct used to configure zoslib with default values\&. 
.PP
\fBParameters\fP
.RS 4
\fIconfig\fP struct to configure zoslib\&. 
.RE
.PP

.SS "int kill (int pid, int sig)"

.SS "int lutimes (const char * filename, const struct timeval tv[2])"
Changes the access and modification times of a file 
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP file path to modify 
.br
\fItv\fP timeval structure containing new time 
.RE
.PP
\fBReturns\fP
.RS 4
return 0 for success, or -1 for failure\&. 
.RE
.PP

.SS "void * roanon_mmap (void * _, size_t len, int prot, int flags, const char * filename, int fd, off_t offset)"
Allocate memory (using \fB__zalloc()\fP) and read into it contents of given file at the given offset\&. 
.PP
\fBParameters\fP
.RS 4
\fI_\fP ignored 
.br
\fIlen\fP length in bytes of memory map 
.br
\fIprot\fP protection bits 
.br
\fIflags\fP mmap flags 
.br
\fIfilename\fP filename to read 
.br
\fIfd\fP file descriptor 
.br
\fIoffset\fP offset in bytes into the file to read 
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the beginning of newly allocated memory, or MAP_FAILED if unsuccessful 
.RE
.PP
\fBDeprecated\fP
.RS 4
This function will be removed once mmap is fully functional (e\&.g\&. MAP_ANONYMOUS is supported), in which case mapped memory would need to be converted to ASCII if the file contains EBCDIC\&. 
.RE
.PP

.SS "int strcasecmp_ignorecp (const char * a, const char * b)"
String case comparision that ignores code page\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP - null-terminated character string\&. 
.br
\fIb\fP - null-terminated character string\&. 
.RE
.PP
\fBReturns\fP
.RS 4
if equal, returns 0, otherwise returns non-zero\&. 
.RE
.PP

.SS "int strncasecmp_ignorecp (const char * a, const char * b, size_t n)"
String case comparision that ignores code page\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP - Character String\&. 
.br
\fIb\fP - Character String\&. 
.br
\fIn\fP - Number of bytes to compare\&. 
.RE
.PP
\fBReturns\fP
.RS 4
if equal, returns 0, otherwise returns non-zero\&. 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "const char* __zoslib_version = \fBDEFAULT_BUILD_STRING\fP"

.SS "char** environ\fC [extern]\fP"

.SS "const char* IFAUsageErrorStrings[]"
\fBInitial value:\fP.PP
.nf
= {
    
    NULL,
    
    "SYSTEM MANAGEMENT FACILITIES (SMF) is not present on the system\&."
    
    "SYSTEM MANAGEMENT FACILITIES (SMF) Usage Collection "
    "Services is not active\&.",
    
    NULL,
    
    "Another product has already registered under the TASK domain\&."
    " IFAUSAGE will record the data for each product\&.",
    
    NULL, NULL, NULL,
    
    "IFAUSAGE could not process more than two problem state program"
    " invocations of REQUEST=REGISTER for the TASK domain\&.",
    
    NULL, NULL, NULL,
    
    "You specified a token on the PRTOKEN parameter that the system"
    " cannot identify\&.",
    
    NULL, NULL, NULL,
    
    "IFAUSAGE cannot complete processing because SMF usage processing"
    " is not available on the system\&."}
.fi

.SS "const char* MODULE_REGISTER_USAGE = 'IFAUSAGE'"

.SH "Author"
.PP 
Generated automatically by Doxygen for zoslib from the source code\&.
