.TH "include/zos-io.h" 3 "zoslib" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/zos-io.h
.SH SYNOPSIS
.br
.PP
\fC#include 'zos\-macros\&.h'\fP
.br
\fC#include <stdarg\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fBdprintf\fP (int fd, const char *,\&.\&.\&.)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fBvdprintf\fP (int fd, const char *, va_list ap)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP void \fB__dump\fP (int fd, const void *addr, size_t len, size_t bw)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP void \fB__dump_title\fP (int fd, const void *addr, size_t len, size_t bw, const char *,\&.\&.\&.)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP void \fB__console\fP (const void *p_in, int len_i)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__console_printf\fP (const char *fmt,\&.\&.\&.)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__find_file_in_path\fP (char *out, int size, const char *envvar, const char *file)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__chgfdccsid\fP (int fd, unsigned short ccsid)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__chgfdcodeset\fP (int fd, char *codeset)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__setfdtext\fP (int fd)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__setfdbinary\fP (int fd)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__disableautocvt\fP (int fd)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__copyfdccsid\fP (int sourcefd, int destfd)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__getfdccsid\fP (int fd)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__setfdccsid\fP (int fd, int t_ccsid)"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP int \fB__getLogMemoryFileNo\fP ()"
.br
.ti -1c
.RI "\fB__Z_EXPORT\fP void \fB__memprintf\fP (const char *format,\&.\&.\&.)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fB__Z_EXPORT\fP int __chgfdccsid (int fd, unsigned short ccsid)"
Change file descriptor to CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.br
\fIccsid\fP CCSID\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __chgfdcodeset (int fd, char * codeset)"
Change file descriptor to CCSID from a codeset 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.br
\fIcodeset\fP code set 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP void __console (const void * p_in, int len_i)"
Print given buffer to MVS Console\&. 
.SS "\fB__Z_EXPORT\fP int __console_printf (const char * fmt,  \&.\&.\&.)"
Print formatted data to MVS Console\&. 
.SS "\fB__Z_EXPORT\fP int __copyfdccsid (int sourcefd, int destfd)"
Copy ccsid from source fd to destination fd 
.PP
\fBParameters\fP
.RS 4
\fIsourcefd\fP file descriptor\&. 
.br
\fIdestfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __disableautocvt (int fd)"
Disable auto-conversion on file descriptors 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP void __dump (int fd, const void * addr, size_t len, size_t bw)"
Dump to console\&. 
.SS "\fB__Z_EXPORT\fP void __dump_title (int fd, const void * addr, size_t len, size_t bw, const char * format,  \&.\&.\&.)"
Dump title to console\&. 
.SS "\fB__Z_EXPORT\fP int __find_file_in_path (char * out, int size, const char * envvar, const char * file)"
Finds file in a given path 
.PP
\fBParameters\fP
.RS 4
\fIout\fP Found path string 
.br
\fIsize\fP Max size of path string 
.br
\fIenvar\fP Environment variable to search 
.br
\fIfile\fP file to search 
.RE
.PP
\fBReturns\fP
.RS 4
returns non-zero if successful, 0 if not found\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __getfdccsid (int fd)"
Get file descriptor CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns file descriptors ccsid\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __getLogMemoryFileNo ()"
Returns the fileno to which memory diagnostics is written (use for instance in a \fC__display_backtrace(__getLogMemoryFileNo());\fP call)\&. 
.SS "\fB__Z_EXPORT\fP void __memprintf (const char * format,  \&.\&.\&.)"
Logs memory allocation and release to the file name specified in the environment variable zoslib_config_t\&.MEMORY_USAGE_LOG_FILE_ENVAR\&. 
.PP
\fBParameters\fP
.RS 4
\fIsame\fP as C's printf() parameters 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __setfdbinary (int fd)"
Change file descriptor to binary 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __setfdccsid (int fd, int t_ccsid)"
Set file descriptor to the provided CCSID\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.br
\fIt_ccsid\fP CCSID\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int __setfdtext (int fd)"
Change file descriptor to text (819 or controlled via envar) 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP file descriptor\&. 
.RE
.PP
\fBReturns\fP
.RS 4
returns 0 if successful, or -1 on failure\&. 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int dprintf (int fd, const char * fmt,  \&.\&.\&.)"
Debug Printf\&. 
.PP
\fBReturns\fP
.RS 4
returns total number of bytes written to file descriptor 
.RE
.PP

.SS "\fB__Z_EXPORT\fP int vdprintf (int fd, const char * fmt, va_list ap)"
Variadic Debug Printf\&. 
.PP
\fBReturns\fP
.RS 4
returns total number of bytes written to file descriptor 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for zoslib from the source code\&.
